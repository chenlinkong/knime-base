/*
 * ------------------------------------------------------------------------
 *
 *  Copyright by KNIME AG, Zurich, Switzerland
 *  Website: http://www.knime.com; Email: contact@knime.com
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License, Version 3, as
 *  published by the Free Software Foundation.
 *
 *  This program is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, see <http://www.gnu.org/licenses>.
 *
 *  Additional permission under GNU GPL version 3 section 7:
 *
 *  KNIME interoperates with ECLIPSE solely via ECLIPSE's plug-in APIs.
 *  Hence, KNIME and ECLIPSE are both independent programs and are not
 *  derived from each other. Should, however, the interpretation of the
 *  GNU GPL Version 3 ("License") under any applicable laws result in
 *  KNIME and ECLIPSE being a combined program, KNIME AG herewith grants
 *  you the additional permission to use and propagate KNIME together with
 *  ECLIPSE with only the license terms in place for ECLIPSE applying to
 *  ECLIPSE and the GNU GPL Version 3 applying for KNIME, provided the
 *  license terms of ECLIPSE themselves allow for the respective use and
 *  propagation of ECLIPSE together with KNIME.
 *
 *  Additional permission relating to nodes for KNIME that extend the Node
 *  Extension (and in particular that are based on subclasses of NodeModel,
 *  NodeDialog, and NodeView) and that only interoperate with KNIME through
 *  standard APIs ("Nodes"):
 *  Nodes are deemed to be separate and independent programs and to not be
 *  covered works.  Notwithstanding anything to the contrary in the
 *  License, the License does not apply to Nodes, you are not required to
 *  license Nodes under the License, and you are granted a license to
 *  prepare and propagate Nodes, in each case even if such Nodes are
 *  propagated with or for interoperation with KNIME.  The owner of a Node
 *  may freely choose the license terms applicable to such Node, including
 *  when such Node is propagated with or for interoperation with KNIME.
 * ---------------------------------------------------------------------
 *
 * History
 *   Feb 16, 2021 (Mark Ortmann, KNIME GmbH, Berlin, Germany): created
 */
package org.knime.filehandling.utility.nodes.compress.truncator;

import static org.junit.Assert.assertEquals;

import java.nio.file.Path;
import java.nio.file.Paths;

import org.junit.Test;
import org.knime.filehandling.utility.nodes.compress.truncator.impl.RegexTruncator;

/**
 * Tests the correctness of the {@link RegexTruncator}.
 *
 * @author Mark Ortmann, KNIME GmbH, Berlin, Germany
 */
public class RegexTruncatorTest {

    private static String getArchiveEntryName(final Path baseFolder, final Path path, final String regex,
        final boolean flattenHierarchy) {
        return TruncatePathOption.TRUNCATE_REGEX.createPathTruncator(flattenHierarchy, regex).truncate(baseFolder,
            path);
    }

    /**
     * Tests the correctness for all valid inputs generated by the framework.
     */
    @Test
    public void testArchiveEntryName() {
        regexCompleteFolderMatchTests(Paths.get("bar/foo/bar"), "bar", Paths.get("foo", "bar"));
        regexCompleteFolderMatchTests(Paths.get("bar/foo/bar"), "bar.*fo", Paths.get("o", "bar"));
        regexCompleteFolderMatchTests(Paths.get("bar/foo/bar"), "823428", Paths.get("bar", "foo", "bar"));
        if (!TruncatorTestsUtils.isWindows()) {
            rootFolderMatchTests();
        }
        baseNullTests();
    }

    /**
     * Tests that an exception is thrown in case the base folder and path are the same plus the provided regex matches
     * the complete base folder.
     */
    @Test(expected = TruncationException.class)
    public void testSamePathFullMatch() {
        final Path p = Paths.get("foo/bar");
        getArchiveEntryName(p, p, ".*", true);
    }

    /**
     * Tests that partial matches work in case that the base folder and path are the same
     */
    @Test
    public void testSamePathPartialMatch() {
        final Path p = Paths.get("farfoo/bar/oo");
        final String regex = "foo.*b";
        final Path relBaseResult = Paths.get("farar/oo");

        final String relExpectedRes = relBaseResult.toString();
        assertEquals(relExpectedRes, getArchiveEntryName(p, p, regex, true));
        assertEquals(relExpectedRes, getArchiveEntryName(p, p, regex, false));

        final String absExpectedRes =
            TruncatorTestsUtils.getRoot().relativize(relBaseResult.toAbsolutePath()).toString();
        assertEquals(absExpectedRes, getArchiveEntryName(p.toAbsolutePath(), p.toAbsolutePath(), regex, true));
        assertEquals(absExpectedRes, getArchiveEntryName(p.toAbsolutePath(), p.toAbsolutePath(), regex, false));
    }

    static void rootFolderMatchTests() {
        final Path root = TruncatorTestsUtils.getRoot();
        final Path relRoot = root.relativize(TruncatorTestsUtils.append(root, "."));
        regexCompleteFolderMatchTests(root.relativize(root), "bar.*fo", root.relativize(root));
        regexCompleteFolderMatchTests(relRoot, "bar.*fo", relRoot);
    }

    private static void regexCompleteFolderMatchTests(final Path relBase, final String regex,
        final Path relExpectedBase) {
        final Path absBase = relBase.toAbsolutePath();

        final Path relPath = TruncatorTestsUtils.append(relBase, "subfolder", "file.txt");
        final Path absPath = relPath.toAbsolutePath();

        final Path root = absPath.getRoot();

        final Path relExpected = TruncatorTestsUtils.append(relExpectedBase, "subfolder", "file.txt");

        // relative no flattening
        final String relResult = getArchiveEntryName(relBase, relPath, regex, false);
        assertEquals(relExpected.normalize().toString(), relResult);

        // absolute no flattening
        final String absResult = getArchiveEntryName(absBase, absPath, regex, false);
        final Path absExpected = relExpected.toAbsolutePath();
        assertEquals(root.relativize(absExpected).normalize().toString(), absResult);

        // relative flattening
        final Path flatRelExpected = TruncatorTestsUtils.append(relExpectedBase, "file.txt");
        final String flatRelResult = getArchiveEntryName(relBase, relPath, regex, true);
        assertEquals(flatRelExpected.normalize().toString(), flatRelResult);

        // absolute flattening
        final String flatAbsResult = getArchiveEntryName(absBase, absPath, regex, true);
        final Path flatAbsExpected = flatRelExpected.toAbsolutePath();
        assertEquals(root.relativize(flatAbsExpected).normalize().toString(), flatAbsResult);
    }

    private static void baseNullTests() {
        final Path relPath = Paths.get("foo", "bar", "subfolder", "file.txt");
        final String relExpected = relPath.toString();
        final String flatExpected = "file.txt";
        assertEquals(relExpected, getArchiveEntryName(null, relPath, ".*", false));
        assertEquals(flatExpected, getArchiveEntryName(null, relPath, ".*", true));

        final Path absPath = relPath.toAbsolutePath();
        final String absExpected = TruncatorTestsUtils.getRoot().relativize(absPath).toString();

        assertEquals(absExpected, getArchiveEntryName(null, absPath, ".*", false));
        assertEquals(flatExpected, getArchiveEntryName(null, absPath, ".*", true));
    }

}
